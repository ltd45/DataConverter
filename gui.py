#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.5
# In conjunction with Tcl version 8.6
#    Apr 17, 2015 11:24:56 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import gui_support
import Function
import tkinter.messagebox as messagebox

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('PDF_Converter')
    geom = "576x277+650+98"
    root.geometry(geom)
    gui_support.set_Tk_var()
    w = PDF_Converter (root)
    gui_support.init(root, w)
    root.mainloop()

w = None
def create_PDF_Converter(root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('PDF_Converter')
    geom = "576x277+650+98"
    w.geometry(geom)
    gui_support.set_Tk_var()
    w_win = PDF_Converter (w)
    gui_support.init(w, w_win, param)
    return w_win

def destroy_PDF_Converter():
    global w
    w.destroy()
    w = None


class PDF_Converter:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        master.configure(background="#d9d9d9")
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.txtInput = Text(master)
        self.txtInput.place(relx=0.03, rely=0.14, relheight=0.12, relwidth=0.65)
        self.txtInput.configure(background="white")
        self.txtInput.configure(font="TkTextFont")
        self.txtInput.configure(foreground="black")
        self.txtInput.configure(highlightbackground="#d9d9d9")
        self.txtInput.configure(highlightcolor="black")
        self.txtInput.configure(insertbackground="black")
        self.txtInput.configure(selectbackground="#c4c4c4")
        self.txtInput.configure(selectforeground="black")
        self.txtInput.configure(width=374)
        self.txtInput.configure(wrap=WORD)

        self.txtOutput = Text(master)
        self.txtOutput.place(relx=0.03, rely=0.58, relheight=0.12, relwidth=0.65)
        self.txtOutput.configure(background="white")
        self.txtOutput.configure(font="TkTextFont")
        self.txtOutput.configure(foreground="black")
        self.txtOutput.configure(highlightbackground="#d9d9d9")
        self.txtOutput.configure(highlightcolor="black")
        self.txtOutput.configure(insertbackground="black")
        self.txtOutput.configure(selectbackground="#c4c4c4")
        self.txtOutput.configure(selectforeground="black")
        self.txtOutput.configure(width=374)
        self.txtOutput.configure(wrap=WORD)
        self.txtOutput.insert(1.0, "Output.csv")

        def inputbrowser_click():
            string = Function.browse()
            self.txtInput.delete(0.0, END)
            self.txtInput.insert(1.0, string)

        self.btnInput = Button(master, command=inputbrowser_click)
        self.btnInput.place(relx=0.69, rely=0.14, height=28, width=68)
        self.btnInput.configure(activebackground="#d9d9d9")
        self.btnInput.configure(activeforeground="#000000")
        self.btnInput.configure(background=_bgcolor)
        self.btnInput.configure(disabledforeground="#a3a3a3")
        self.btnInput.configure(foreground="#000000")
        self.btnInput.configure(highlightbackground="#d9d9d9")
        self.btnInput.configure(highlightcolor="black")
        self.btnInput.configure(pady="0")
        self.btnInput.configure(text='''Browse''')
        self.btnInput.configure(width=68)

        def output_click():
            string = Function.browse()
            self.txtOutput.delete(0.0, END)
            self.txtOutput.insert(1.0, string)

        self.btnOutput = Button(master,command=output_click)
        self.btnOutput.place(relx=0.69, rely=0.58, height=28, width=68)
        self.btnOutput.configure(activebackground="#d9d9d9")
        self.btnOutput.configure(activeforeground="#000000")
        self.btnOutput.configure(background=_bgcolor)
        self.btnOutput.configure(disabledforeground="#a3a3a3")
        self.btnOutput.configure(foreground="#000000")
        self.btnOutput.configure(highlightbackground="#d9d9d9")
        self.btnOutput.configure(highlightcolor="black")
        self.btnOutput.configure(pady="0")
        self.btnOutput.configure(text='''Browse''')
        self.btnOutput.configure(width=68)

        def start():
            input=self.txtInput.get(1.0, END)
            if(input.strip() == ''):
                messagebox.showinfo("ERROR","You need to specify an Input County PDF")
                return
            output=self.txtOutput.get(1.0, END)
            if(output.strip() == ''):
                messagebox.showinfo("ERROR", "You need to specify an Output FileName")
                return
            state=self.txtstate.get(1.0, END)
            if(state.strip() == ''):
                messagebox.showinfo("ERROR", "You need to specify an Input State PDF")
            v = gui_support.v.get()
            if v == '':
                messagebox.showinfo("Error No Selected Type","You need to select a pdf type either Births or Teenagers")
                return
            try:
                if v == '1':
                    i = Function.Birthfunction(input.strip(), output.strip(), state.strip())
                if v == '2':
                    i = Function.Fertilityfunction(input.strip(),output.strip(), state.strip())
                messagebox.showinfo("Results", i)
                return
            except:
                messagebox.showinfo("Error", "The Files did not match needed formats.")
                return


        self.btnStart = Button(master,command=start)
        self.btnStart.place(relx=0.03, rely=0.83, height=28, width=98)
        self.btnStart.configure(activebackground="#d9d9d9")
        self.btnStart.configure(activeforeground="#000000")
        self.btnStart.configure(background=_bgcolor)
        self.btnStart.configure(disabledforeground="#a3a3a3")
        self.btnStart.configure(foreground="#000000")
        self.btnStart.configure(highlightbackground="#d9d9d9")
        self.btnStart.configure(highlightcolor="black")
        self.btnStart.configure(pady="0")
        self.btnStart.configure(text='''Start''')

        def exitcommand():
            sys.exit(0)

        self.btnExit = Button(master, command=exitcommand)
        self.btnExit.place(relx=0.47, rely=0.83, height=28, width=88)
        self.btnExit.configure(activebackground="#d9d9d9")
        self.btnExit.configure(activeforeground="#000000")
        self.btnExit.configure(background=_bgcolor)
        self.btnExit.configure(disabledforeground="#a3a3a3")
        self.btnExit.configure(foreground="#000000")
        self.btnExit.configure(highlightbackground="#d9d9d9")
        self.btnExit.configure(highlightcolor="black")
        self.btnExit.configure(pady="0")
        self.btnExit.configure(text='''Exit''')
        self.btnExit.configure(width=88)

        def clearcommand():
            self.txtInput.delete('1.0', END)
            self.txtOutput.delete('1.0', END)
            self.txtstate.delete('1.0', END)

        self.btnClear = Button(master, command=clearcommand)
        self.btnClear.place(relx=0.28, rely=0.83, height=28, width=81)
        self.btnClear.configure(activebackground="#d9d9d9")
        self.btnClear.configure(activeforeground="#000000")
        self.btnClear.configure(background=_bgcolor)
        self.btnClear.configure(disabledforeground="#a3a3a3")
        self.btnClear.configure(foreground="#000000")
        self.btnClear.configure(highlightbackground="#d9d9d9")
        self.btnClear.configure(highlightcolor="black")
        self.btnClear.configure(pady="0")
        self.btnClear.configure(text='''Clear''')
        self.btnClear.configure(width=81)

        self.radio_Birth = Radiobutton(master)
        self.radio_Birth.place(relx=0.83, rely=0.14, relheight=0.1, relwidth=0.1)
        self.radio_Birth.configure(activebackground="#d9d9d9")
        self.radio_Birth.configure(activeforeground="#000000")
        self.radio_Birth.configure(background=_bgcolor)
        self.radio_Birth.configure(disabledforeground="#a3a3a3")
        self.radio_Birth.configure(foreground="#000000")
        self.radio_Birth.configure(highlightbackground="#d9d9d9")
        self.radio_Birth.configure(highlightcolor="black")
        self.radio_Birth.configure(justify=LEFT)
        self.radio_Birth.configure(text='''Births''')
        self.radio_Birth.configure(value="1")
        self.radio_Birth.configure(variable=gui_support.v)

        self.Radio_Teenagers = Radiobutton(master)
        self.Radio_Teenagers.place(relx=0.83, rely=0.22, relheight=0.1, relwidth=0.15)
        self.Radio_Teenagers.configure(activebackground="#d9d9d9")
        self.Radio_Teenagers.configure(activeforeground="#000000")
        self.Radio_Teenagers.configure(background=_bgcolor)
        self.Radio_Teenagers.configure(disabledforeground="#a3a3a3")
        self.Radio_Teenagers.configure(foreground="#000000")
        self.Radio_Teenagers.configure(highlightbackground="#d9d9d9")
        self.Radio_Teenagers.configure(highlightcolor="black")
        self.Radio_Teenagers.configure(justify=LEFT)
        self.Radio_Teenagers.configure(text='''Teenagers''')
        self.Radio_Teenagers.configure(value="2")
        self.Radio_Teenagers.configure(variable=gui_support.v)
        self.radio_Birth.invoke()

        self.txtstate = Text(master)
        self.txtstate.place(relx=0.03, rely=0.36, relheight=0.12, relwidth=0.65)
        self.txtstate.configure(background="white")
        self.txtstate.configure(font="TkTextFont")
        self.txtstate.configure(foreground="black")
        self.txtstate.configure(highlightbackground="#d9d9d9")
        self.txtstate.configure(highlightcolor="black")
        self.txtstate.configure(insertbackground="black")
        self.txtstate.configure(selectbackground="#c4c4c4")
        self.txtstate.configure(selectforeground="black")
        self.txtstate.configure(width=374)
        self.txtstate.configure(wrap=WORD)

        def statebrowser_click():
            string = Function.browse()
            self.txtstate.delete(0.0, END)
            self.txtstate.insert(1.0, string)

        self.btnBrowseState = Button(master, command=statebrowser_click)
        self.btnBrowseState.place(relx=0.69, rely=0.36, height=28, width=68)
        self.btnBrowseState.configure(activebackground="#d9d9d9")
        self.btnBrowseState.configure(activeforeground="#000000")
        self.btnBrowseState.configure(background=_bgcolor)
        self.btnBrowseState.configure(disabledforeground="#a3a3a3")
        self.btnBrowseState.configure(foreground="#000000")
        self.btnBrowseState.configure(highlightbackground="#d9d9d9")
        self.btnBrowseState.configure(highlightcolor="black")
        self.btnBrowseState.configure(pady="0")
        self.btnBrowseState.configure(text='''Browse''')
        self.btnBrowseState.configure(width=68)

        self.Label1 = Label(master)
        self.Label1.place(relx=0.03, rely=0.04, height=23, width=77)
        self.Label1.configure(background=_bgcolor)
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Counties File''')
        self.Label1.configure(width=77)

        self.Label2 = Label(master)
        self.Label2.place(relx=0.03, rely=0.29, height=13, width=57)
        self.Label2.configure(background=_bgcolor)
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''State File''')
        self.Label2.configure(width=57)

        self.Label3 = Label(master)
        self.Label3.place(relx=0.03, rely=0.51, height=13, width=69)
        self.Label3.configure(background=_bgcolor)
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Output File''')
        self.Label3.configure(width=69)






if __name__ == '__main__':
    vp_start_gui()
